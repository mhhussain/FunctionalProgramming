
*intro
	- Hi everyone, today's topic is functional programming. I am going to cover what it is, how it works, and why it's important. It's a topic that I find super interesting so I have done the research and I hope you all can find this useful. Before I start, I do want to say, that I have done an extensive amount of research on this topic, and even still, my comfort level with this is still shaky at best. And so, by no means pull your punches, but if there's anything that I cannot answer, I promise that I will find out and let you know.
	- So as a start, I sent out a survey to everyone just to see what everyone else knew.
		- No one really knows much
		- Most people missed it completely
		- A few reasonable answers
		- Nothing too solid as to what it is as a full paradigm
	- Presentation will be more of a lecture
	- Pay attention, will be throwing a lot of information at you
	- No questions except on slides

*why is functional programming hard?
*broken up into a few key concepts
	- Imperative vs declarative
		- examples
	- Mutable vs immutable
	- Stateful vs stateless
	- Concurrency

*History
	- lambda calculus
		- examples
*Imperative vs declarative
*Mutable vs immutable
	- Key reason (imo) that functional programming is difficult
	- recursion
*Stateful vs stateless
	- student teacher example
*Concurrency and parallellism
	- no state, so parallel processing is easier



This is the most correct and most incorrect answer:
In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. Just kidding... I thought it was something similar to procedural programming.

	- Programming paradigm
	- Avoids changing state
	- No mutable data

Brief history lesson
	- 1932 - Alonzo Church and Stephen C. Kleene - Lambda Calculus
	- They were studying the foundation of mathematics and they wanted to get to the roots of mathematics; they wanted to abstract it as far he logically could
	- The construct that they abstracted down to was the 'function'
	- A function is, according to Church and Kleene, the most basic mathematical construct
		- f(x) = x + 10
		- They wanted to use functions everywhere, so they created a notation to allow for that
		- f(x) = x + 10 --> (λx.x + 10)
			- This denotes a function that takes one parameter, x, and adds 10 to it
			- (λx.x + 10) 32 = 32 + 10 = 42 -- Giving an argument is called an application
		- (λop.λx.(op x x)) (+) 21 = + 21 21 = 42
		- (λop.λx.(op x x)) (*) 21 = * 21 21 = 441
	- Back in the 30s, it didn't exactly catch on, and it didn't fulfill it's original purpose, but once computers took over, it served as the theoretical basis and inspiration for functional programming

Three points from before
	- Programming paradigm
	- Declarative
	- Avoids changing data
	- No mutable data

What is functional programming
	- Functional programming is a style of programming that emphasizes the evaluation of expressions, rather than execution of commands. The expressions in these languages are formed by using functions to combine basic values.

Declarative vs imperative

Mutability
	- This is why it is hard

State
	- Concurrency

