
*intro
	- Hi everyone, today's topic is functional programming. I am going to cover what it is, how it works, and why it's important. It's a topic that I find super interesting so I have done the research and I hope you all can find this useful. Before I start, I do want to say, that I have done an extensive amount of research on this topic, and even still, my comfort level with this is still shaky at best. And so, by no means pull your punches, but if there's anything that I cannot answer, I promise that I will find out and let you know.
	- So as a start, I sent out a survey to everyone just to see what everyone else knew.
		- No one really knows much
		- Most people missed it completely
		- A few reasonable answers
		- Nothing too solid as to what it is as a full paradigm
	- Presentation will be more of a lecture
	- Pay attention, will be throwing a lot of information at you
	- No questions except on slides

*why is functional programming hard?
*broken up into a few key concepts
	- Imperative vs declarative
		- examples
	- Mutable vs immutable
	- Stateful vs stateless
	- Concurrency

*History
	- lambda calculus
		- examples
*Imperative vs declarative
*Mutable vs immutable
	- Key reason (imo) that functional programming is difficult
	- recursion
*Stateful vs stateless
	- student teacher example
*Concurrency and parallellism
	- no state, so parallel processing is easier



This is the most correct and most incorrect answer:
In computer science, functional programming is a programming paradigm—a style of building the structure and elements of computer programs—that treats computation as the evaluation of mathematical functions and avoids changing-state and mutable data. Just kidding... I thought it was something similar to procedural programming.

	- Programming paradigm
	- Evaluation of functions
	- Avoids changing state
	- Avoids mutable data

Brief history lesson
	- 1932 - Alonzo Church and Stephen C. Kleene - Lambda Calculus
	- They were studying the foundation of mathematics and they wanted to get to the roots of mathematics; they wanted to abstract it as far they logically could
	- The construct that they abstracted down to was the 'function'
	- A function is, according to Church and Kleene, the most basic mathematical construct
		- f(x) = x + 10
		- They wanted to use functions everywhere, so they created a notation to allow for that
		- f(x) = x + 10 --> (λx.x + 10)
			- This denotes a function that takes one parameter, x, and adds 10 to it
			- (λx.x + 10) 32 = 32 + 10 = 42 -- Giving an argument is called an application
		- (λop.λx.(op x x)) (+) 21 = + 21 21 = 42
		- (λop.λx.(op x x)) (*) 21 = * 21 21 = 441
	- Back in the 30s, it didn't exactly catch on, and it didn't fulfill it's original purpose, but once computers took over, it served as the theoretical basis and inspiration for functional programming

Three points from before
	- Programming paradigm
	- Evaluation of functions
	- Avoids changing state
	- Avoids mutable data

What is functional programming
	- Not the opposite of OOP, it's the opposite of imperative programming.
	- Functional programming is like explaining to a mathmetician how to solve a problem; imperative programming is telling an idiot what to do.
	- Functional programming is a style of programming that emphasizes the evaluation of expressions, rather than execution of commands. The expressions in these languages are formed by using functions to combine basic values.

Execution of commands
	- The program is expressed as a sequence of commands. Commands specify how to achieve the end result by creating objects and manipulating them.
		- This is where the tie in to OOP comes from
		- OOP is very typically imperative, but not naturally imperative.
	- The approach uses objects that can be changed and the code describes how to change those objects.
	- Example: We're making a cup of coffee. The cup of coffee is our object. We add cream and sugar to it, and thereby changed the object.
		- class CupOfCoffee {
			int cream;
			int sugar
		};
		- var yay = new CupOfCoffee();
		  yay.cream++;
		  yay.sugar++;

Evaluation of expressions
	- The program code is an expression that specifies properties of the object we want to get as the result.
	- We don't specify the steps necessary to construct the object and we can't accidentally use the object before it's created.
	- Example: Same coffee example, let's say you want to add sugar:
		- var yay = new CupOfCoffee();
		  var nowWithSugar = yay.AddSugar(1);

Questions?

Functional programming is the evaluation of expressions as opposed to the execution of commands.

Evaluation of functions
Declarative vs Imperative
	- Imperative programming is the execution of commands. The program consists of statements that specify how to change the state of the program. It is a step-by-step description of telling the computer how to accomplish it's overall task.
	- In declarative programming style, we express the logic of the program without specifying the execution details
		- Here lies one of the difficulties
		- This starts to get into the theory of computer science
		- The logic of a program is separate from the details of execution
		- These two things are usually conflated when they are taught to us, but they are distinctly separate concepts
		- You can code a function multiple different ways
		- You can see this in our tech assessment, q3
	- Example: You have a list of customers and you want to pluck from that list all the customers who's age is greater than 65.
		- Imperatively: start a loop, iterate through every customer, if the age is greater than 65, then add it to some temp list. Once the loop terminates, return the temp list.
		- Declaratively: filter from customers where customer age is greater than 65
		- Imperatively:
			for (var i = 0; i < customers.Count(); i++)
			{
				if (customers[i].age > 65)
				{
					tempList.Add(customers[i]);
				}
			}
			return tempList;
		- Declaratively:
			- SQL (assuming a customer table)
				SELECT * FROM Customer WHERE Age > 65
			- C# (LINQ)
				from c in customers
				where c.age > 65
				select c
			- C# (LINQ Extensions)
				customers.Where(c => c.age > 65);
			- Javascript (lodash or underscore)
				_.filter(customers, function (c) {
					return c.age > 65
				});
			- C++ (C++ 11 - lambdas super clunky and awful)
				filter(customers.begin(), customers.end(), [] (Customer c) { return c.age > 65; });
			- Java
				customers.stream().filter(c -> c.age > 65).collect(Collectors.toList());
			- Python lambda
				filter(lambda c: c.age > 65, customers)
			- Python list comprehension
				[c for customer in customers if customer.age > 65]
			- F#
				customers |> List.filter (fun (c) -> c.age > 65)
				- Treats functions as first class members (for example, data types are first class members of any language)
				let over65(c) = c.age > 65
				customers |> List.filter over65
	- The declarative example is much easier to read and decipher.
		- If I were to give you the imperative code, and the F# code, without even knowing F# you could probably still decipher what it is doing faster than the imperative code
		- It is significantly easier to read

Questions?

Avoids mutable data
Im/Mutability
	- This is why it is hard
	- In my opinion, the hardest part of writing functional programs
	- Go back to the coffee example
	- Immutable - once a value is set, it CANNOT be changed
	- Strict vs non strict
	- Variable vs value
	- Why immutable?
		- Significantly easier to predict what a program will do
		- Your program becomes stateless
		- Removes "void" functions who's only job is to alter program state
		- You don't get side effects - locking and race conditions - readonly
		- That's not to say you can be careless
		- Function output is extremely predictable - they are dependent purely on input
	- Example: sum up all number between two numbers (i.e. SumNumbers(5, 10) -> 45)
		- Imperatively
			int SumNumbers(int from, int to)
			{
				int retVal = 0;
				for (var i = from; i <= to; i++)
				{
					retVal += i;
				}
				return retVal;
			}
			Notice how the value of retVal cannot be easily predicted at any time. It is constantly changing. But you obviously need a temporary variable to hold value and add more to it. How the hell would do it without?
			This is exactly the difficulty in writing a program functionally. Loops are not common in functional programming. The result of conditionals wil never change
		- Functionally - done recursively
			int SumNumbers(int from, int to)
			{
				if (from > to) return 0;
				int sumRest = SumNumbers(from + 1, to);
				return from + sumRest;
			}
			This is valid because, while the value of sumRest is different depending on the activation frame, within the scope of the function and it's given parameters, the value is not being mutated.
	- Memory issues
		- The only good answer I found is that it is "sometimes" more inefficient. Comparing OOP and Functional isn't appropriate. They're different. Yes, if you were to program functional the same way you program OOP then it would likely be inefficiencies; however, the point is that it isn't programmed the same way. While immutability introduces potential memory problems, it also gets rid of some. Because of immutability, the langauge can more easily share data between functions and data structures because the language guarantees that the objects wont change one bound.
		- Functional also encourages using immutable data structures. Like a tree as opposed to a hash table.
		- Functional is also extremely lazy. Virtually everything is lazy loaded. Evaluation happens on access.
			- Leads into things like infinite and lazy lists, but that's really getting into the details

Questions?


Avoid changing state
State
	- There really isn't much more to say here so I will provide a joke. A lymric of sorts.
		STUDENT: Sir, can I ask a question?
		TEACHER: Yes!
		STUDENT: How do you put an elephant inside a fridge?
		TEACHER: I don't know.
		STUDENT: It's easy, you just open the fridge and put it in. I have another question!
		TEACHER: Ok, ask.
		STUDENT: How to put a donkey inside the fridge?
		TEACHER: It's easy, you just open the fridge and put it in.
		STUDENT: No sir, You just open the fridge take out the elephant and put it in.
		TEACHER: Ooh...ok!!
		STUDENT: Let me ask another one. If all the animals went to the lion's birthday party, and one animal went missing which one would it be?
		TEACHER: The lion of course! Because it would eat all the animals.
		STUDENT: No sir, it is the donkey, because it's still inside the fridge.
		TEACHER: Are you kidding me?
		STUDENT: No sir, one last question.
		TEACHER: Ok!
		STUDENT: If there's a river known to be full of crocodiles and you wanted to cross, how would you?
		TEACHER: There's no way, I would need a boat to cross.
		STUDENT: No sir, you just swim and cross it because all the animals went to the lion's birthday party.
	- In a stateful system, it is difficult to predict the outcome of a program without adequately tracing the execution back.
	- In most practice, we avoid state altogether
	- Functional programs, by nature, tend to be very stateless, and thus make code easier to work with
	- Concurrency and parallelism
		- Functional languages are very condusive to parallel programming
		- You still need to be careful

Finale'
	- Very basic introduction
	- Progamming is hard, and functional programming is hard
	- Functional programming is a paradigm
		- Not simply a style (like declarative) or a framework/library
	- All the things about it are not nuances of the paradigm, but rather the philosophy and actual science of it
		- Just like imperative, and objects, and state, and mutability
	- It's super important and interesting and gaining a lot of traction
		- Most mainstream languages have either some built in features for functional style, or frameworks that allow it
	- There's alot of functional languages:
		- .NET: F#, Nemerle
		- JVM: Scala, Clojure
		- Erlang: Erlang, elixir
		- Native: Haskell, OCaml

Final note
	- Functional programming is a different way of thinking. Where most programming languages and paradigms sprouted from mathematics, functional is and always will be very deeply rooted in it.

Questions?